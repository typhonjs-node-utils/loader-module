{"version":3,"file":"ModuleLoader.js","sources":["../../node_modules/@typhonjs-utils/package-json/src/util/TraversalData.js","../../node_modules/@typhonjs-utils/package-json/src/util/getPackagePath.js","../../node_modules/@typhonjs-utils/package-json/src/util/getPackageType.js","../../src/node/ModuleLoader.js"],"sourcesContent":["import url  from 'url';\nimport fs   from 'fs';\nimport path from 'path';\n\n/**\n * Stores the data tracked over traversing the starting directory. And provides a few internal utility methods.\n */\nexport default class TraversalData\n{\n   constructor()\n   {\n      /**\n       * Stores any base directory defined or the root path.\n       *\n       * @type {string}\n       */\n      this.baseDirectory = void 0;\n\n      /**\n       * Stores the number of times a package is processed; useful in callbacks.\n       *\n       * @type {number}\n       */\n      this.cntr = 0;\n\n      /**\n       * Current directory of traversal.\n       *\n       * @type {string}\n       */\n      this.currentDirectory = void 0;\n\n      /**\n       * Current loaded `package.json` object.\n       *\n       * @type {object}\n       */\n      this.packageObj = void 0;\n\n      /**\n       * Path of current loaded `package.json` object\n       *\n       * @type {string}\n       */\n      this.packagePath = void 0;\n\n      /**\n       * The root path to stop traversal; determined from starting directory path.\n       *\n       * @type {string}\n       */\n      this.rootPath = void 0;\n\n      /**\n       * Stores a callback function.\n       *\n       * @type {Function}\n       * @private\n       */\n      this._callback = void 0;\n   }\n\n   /**\n    * Returns true if basedir has been set comparing the starting directory against the base directory to\n    * determine if the base directory is a parent path intentionally stopping traversal.\n    *\n    * @returns {boolean} Whether basedir is set and a parent of the starting directory.\n    */\n   isBaseParent()\n   {\n      // If basepath is not configured it is set to root path.\n      if (this.baseDirectory === this.rootPath) { return false; }\n\n      const relative = path.relative(this.baseDirectory, this.currentDirectory);\n      return relative && !relative.startsWith('..') && !path.isAbsolute(relative);\n   }\n\n   /**\n    * Parses the options object passed into the various getPackage functions.\n    *\n    * @param {TraversalData}  data - A TraversalData instance.\n    *\n    * @param {object}      options - An object.\n    *\n    * @param {string|URL}  options.filepath - Initial file or directory path to search for `package.json`.\n    *\n    * @param {string|URL}  [options.basepath] - Base path to stop traversing. Set to the root path of `filepath` if not\n    *                                           provided.\n    *\n    * @param {Function}    [options.callback] - A function that evaluates any loaded package.json object that passes\n    *                                           back a truthy value that stops or continues the traversal.\n    *\n    * @returns {TraversalData} Returns the parsed TraversalData instance.\n    */\n   static parse(data, { filepath, basepath = void 0, callback } = {})\n   {\n      if (typeof filepath !== 'string' && !(filepath instanceof URL))\n      {\n         throw new TypeError(`'filepath' is not a 'string' or file 'URL'`);\n      }\n\n      if (basepath !== void 0 && typeof basepath !== 'string' && !(basepath instanceof URL))\n      {\n         throw new TypeError(`'basepath' is not a 'string' or file 'URL'`);\n      }\n\n      if (callback !== void 0 && typeof callback !== 'function')\n      {\n         throw new TypeError(`'callback' is not a 'function'`);\n      }\n\n      // Convert basepath if an URL to a file path\n      if (basepath instanceof URL)\n      {\n         basepath = url.fileURLToPath(basepath);\n      }\n\n      // Convert any URL or string file URL to path.\n      if (filepath instanceof URL || filepath.startsWith('file:/'))\n      {\n         filepath = url.fileURLToPath(filepath);\n      }\n\n      // Handle `filepath` as a directory or get directory of path with file name.\n      data.currentDirectory = fs.existsSync(filepath) && fs.lstatSync(filepath).isDirectory() ?\n       path.resolve(filepath) : path.resolve(path.dirname(filepath));\n\n      // Convert basepath to root of resolved file path if not a string.\n      if (typeof basepath !== 'string')\n      {\n         basepath = path.parse(data.currentDirectory).root;\n      }\n\n      // Convert string file URL to path.\n      if (basepath.startsWith('file:/'))\n      {\n         basepath = url.fileURLToPath(basepath);\n      }\n\n      // Handle `basepath` as a directory or convert a path with file name to a directory.\n      data.baseDirectory = fs.existsSync(basepath) && fs.lstatSync(basepath).isDirectory() ? path.resolve(basepath) :\n       path.resolve(path.dirname(basepath));\n\n      // If the resolved paths do not exist then return null.\n      if (!fs.existsSync(data.baseDirectory) || !fs.existsSync(data.currentDirectory))\n      {\n         throw new Error(`Could not resolve 'filepath' or 'basepath'`);\n      }\n\n      // Ensure we track the root of the current directory path to stop iteration.\n      data.rootPath = path.parse(data.currentDirectory).root;\n\n      data._callback = callback;\n\n      return data;\n   }\n}\n","import fs            from 'fs';\nimport path          from 'path';\n\nimport TraversalData from './TraversalData.js';\n\n/**\n * @typedef {object} PackageObjData\n *\n * @property {object|undefined}  packageObj - Loaded `package.json` object.\n * @property {string|undefined}  packagePath - Path of loaded `package.json` object.\n * @property {Error|undefined}   error - An error instance.\n */\n\n/**\n * Attempts to traverse from `filepath` to `basepath` attempting to load `package.json` along with the package path.\n *\n * Note: If malformed data is presented the result will undefined along with a possible error included in the returned\n * object / `PackageObjData`. Also note that a file may be specified that does not exist and the directory will be\n * resolved. If that directory exists then resolution will continue.\n *\n * @param {object}      options - An object.\n *\n * @param {string|URL}  options.filepath - Initial file or directory path to search for `package.json`.\n *\n * @param {string|URL}  [options.basepath] - Base path to stop traversing. Set to the root path of `filepath` if not\n *                                           provided.\n *\n * @param {Function}    [options.callback] - A function that evaluates any loaded package.json object that passes back a\n *                                           truthy value that stops or continues the traversal.\n *\n * @returns {PackageObjData} Loaded package.json / path or potentially an error.\n */\nexport default function getPackagePath(options)\n{\n   const isTraversalData = options instanceof TraversalData;\n\n   const data = isTraversalData ? options : new TraversalData();\n\n   try\n   {\n      if (!isTraversalData)\n      {\n         TraversalData.parse(data, options);\n      }\n\n      const context = {};\n\n      do\n      {\n         data.packagePath = path.resolve(data.currentDirectory, 'package.json');\n\n         // If there is a `package.json` path attempt to load it.\n         if (fs.existsSync(data.packagePath))\n         {\n            data.packageObj = JSON.parse(fs.readFileSync(data.packagePath, 'utf-8'));\n\n            // If it is a valid object then process it.\n            if (typeof data.packageObj === 'object')\n            {\n               // If there is a provided callback then invoke it with the traversal data and if a truthy value is\n               // returned then return the data; otherwise immediately return the loaded `package.json` object & path.\n               if (typeof data._callback === 'function')\n               {\n                  if (data._callback.call(context, data))\n                  {\n                     return { packageObj: data.packageObj, packagePath: data.packagePath };\n                  }\n               }\n               else\n               {\n                  return { packageObj: data.packageObj, packagePath: data.packagePath };\n               }\n\n               data.cntr++;\n            }\n         }\n\n         // If the current directory equals the base directory then stop traversal.\n         if (data.currentDirectory === data.baseDirectory) { break; }\n\n      // If the current directory equals the root path then stop traversal.\n      } while ((data.currentDirectory = path.dirname(data.currentDirectory)) !== data.rootPath);\n   }\n   catch (error)\n   {\n      return { packagePath: data.packagePath, error };\n   }\n\n   return { error: new Error(`No 'package.json' located`) };\n}\n","import getPackagePath from './getPackagePath.js';\nimport TraversalData  from './TraversalData.js';\n\n/**\n * Attempts to traverse from `filepath` to `basepath` attempting to access `type` field of `package.json`. The type\n * is returned if it is set in the found `package.json` otherwise `commonjs` is returned.\n *\n * Note: With only `filepath` set this function only reliably returns a positive result when there are no\n * intermediary `package.json` files in between a supposed root and path. If provided with malformed\n * data or there is any error / edge case triggered then 'commonjs' by default will be returned.\n *\n * Another edge case is that traversal stops at the first valid `package.json` file and this may not contain a `type`\n * property whereas a `package.json` file in the root of the module may define it.\n *\n * However if you provide a `filepath` and a `basepath` that is a parent path giving a firm stopping point then a\n * proper resolution callback, `s_RESOLVE_TYPE`, is automatically added. Intermediary `package.json` files that\n * do not have an explicit `type` attribute set do not prevent traversal which continues until the `basepath` is\n * reached which is how Node.js actually resolves the `type` attribute.\n *\n * @param {object}      options - An object.\n *\n * @param {string|URL}  options.filepath - Initial file or directory path to search for `package.json`.\n *\n * @param {string|URL}  [options.basepath] - Base path to stop traversing. Set to the root path of `filepath` if not\n *                                           provided.\n *\n * @param {Function}    [options.callback] - A function that evaluates any loaded package.json object that passes back a\n *                                           truthy value that stops or continues the traversal.\n *\n * @returns {string} Type of package - 'module' for ESM otherwise 'commonjs'.\n */\nexport default function getPackageType(options)\n{\n   try\n   {\n      const data = TraversalData.parse(new TraversalData(), options);\n\n      // Base directory is set and there is no callback set so add a proper resolution callback for package type.\n      if (data.isBaseParent() && data._callback === void 0)\n      {\n         data._callback = s_RESOLVE_TYPE;\n      }\n\n      const result = getPackagePath(data);\n\n      return typeof result.packageObj === 'object' ?\n       result.packageObj.type === 'module' ? 'module' : 'commonjs' :\n        'commonjs';\n   }\n   catch (error)\n   {\n      return 'commonjs';\n   }\n}\n\n/**\n * Handles proper resolution of finding the parent `package.json` that has a type attribute set. You must set\n * `basepath` to provide a known stopping point.\n *\n * @param {TraversalData}  data - Current traversal state.\n *\n * @returns {boolean} If the package object contains a `type` attribute then stop traversal.\n */\nconst s_RESOLVE_TYPE = (data) => typeof data.packageObj.type === 'string';\n","import module              from 'module';\nimport path                from 'path';\nimport url                 from 'url';\n\nimport { getPackageType }  from '@typhonjs-utils/package-json';\n\nconst requireMod = module.createRequire(import.meta.url);\n\nexport default class ModuleLoader\n{\n   /**\n    * Loads an ES Module in the browser passing back an object containing info about the loading process.\n    *\n    * @param {object}      options - Options object.\n    *\n    * @param {string|URL}  options.modulepath - A module name, file path, or URL.\n    *\n    * @param {function}    [options.resolveModule] - An optional function which resolves the import to set `instance`.\n    *\n    * @param {string}      [options.basepath] - An optional base file path to accurately resolve `package.json`. By\n    *                                           default the traversal algorithm stops at the first `package.json`\n    *                                           encountered.\n    *\n    * @returns {Promise<{ModuleLoaderObj}>}\n    */\n   static async load({ modulepath, resolveModule = void 0, basepath = void 0 } = {})\n   {\n      if (!(modulepath instanceof URL) && typeof modulepath !== 'string')\n      {\n         throw new TypeError(`'modulepath' is not a string or URL`);\n      }\n\n      if (resolveModule !== void 0 && typeof resolveModule !== 'function')\n      {\n         throw new TypeError(`'resolveModule' is not a function`);\n      }\n\n      if (basepath !== void 0 && typeof basepath !== 'string')\n      {\n         throw new TypeError(`'basepath' is not a string`);\n      }\n\n      const { filepath, isESM, type, loadpath } = resolvePath(modulepath, basepath);\n\n      const module = isESM ? await import(url.pathToFileURL(filepath)) : requireMod(filepath);\n\n      const instance = resolveModule !== void 0 ? resolveModule(module) : module;\n\n      return { filepath, instance, loadpath, isESM, module, modulepath, type };\n   }\n}\n\n// Module Private ----------------------------------------------------------------------------------------------------\n\n/**\n * For `.js` files uses `getPackageType` to determine if `type` is set to `module` in associated `package.json`. If\n * the `modulePath` provided ends in `.mjs` it is assumed to be ESM.\n *\n * @param {string} filepath - File path to load.\n *\n * @param {string} [basepath] - An optional base file path to accurately resolve `package.json`. By default the\n *                              traversal algorithm stops at the first `package.json` encountered.\n *\n * @returns {boolean} If the filepath is an ES Module.\n */\nfunction isPathModule(filepath, basepath)\n{\n   const extension = path.extname(filepath).toLowerCase();\n\n   switch (extension)\n   {\n      case '.js':\n// console.log(`!!!!! getPackageType({ filepath, basepath }): ${getPackageType({ filepath, basepath })}`)\n// console.log(`!!!!! truthy result: ${getPackageType({ filepath, basepath }) === 'module'}`)\n         return getPackageType({ filepath, basepath }) === 'module';\n\n      case '.mjs':\n         return true;\n\n      default:\n         return false;\n   }\n}\n\n/**\n * Resolves a module path first by `require.resolve` to allow Node to resolve an actual module. If this fails then\n * the `modulepath` is resolved as a file path.\n *\n * @param {string|URL}  modulepath - A module name, file path, URL to load.\n *\n * @param {string}      [basepath] - An optional base file path to accurately resolve `package.json`. By default the\n *                                   traversal algorithm stops at the first `package.json` encountered.\n *\n * @returns {{filepath: string, isESM: boolean, type: string, loadpath: string}} An object including file path and\n *                                                                               whether the module is ESM.\n */\nfunction resolvePath(modulepath, basepath)\n{\n   let filepath, isESM, type = 'module';\n\n   let loadpath = modulepath;\n\n   try\n   {\n      filepath = requireMod.resolve(modulepath);\n      isESM = isPathModule(filepath, basepath);\n   }\n   catch (error)\n   {\n      if (modulepath instanceof URL || modulepath.startsWith('file:'))\n      {\n         filepath = url.fileURLToPath(modulepath);\n         type = 'url';\n\n         loadpath = modulepath instanceof URL ? modulepath.toString() : modulepath;\n      }\n      else\n      {\n         filepath = path.resolve(modulepath);\n         type = 'path';\n\n         loadpath = filepath;\n      }\n\n      isESM = isPathModule(filepath, basepath);\n   }\n\n   type = `${isESM ? 'import' : 'require'}-${type}`;\n\n   return { filepath, isESM, type, loadpath };\n}\n"],"names":[],"mappings":"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"}